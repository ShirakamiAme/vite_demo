{"ast":null,"code":"// src/store/userStore.js (修复后)\nimport { defineStore } from 'pinia';\nimport { loginUser, getCurrentUser } from '@/api/user';\nexport default defineStore('user', {\n  state: () => ({\n    isLoggedIn: false,\n    username: '',\n    userEmail: '',\n    cartCount: 0,\n    token: null\n  }),\n  actions: {\n    // 初始化用户状态\n    init() {\n      const token = localStorage.getItem('token');\n      const savedState = localStorage.getItem('userState');\n      if (token) {\n        this.token = token;\n        this.isLoggedIn = true;\n        if (savedState) {\n          try {\n            const state = JSON.parse(savedState);\n            this.username = state.username || '';\n            this.userEmail = state.userEmail || '';\n            this.cartCount = state.cartCount || 0;\n          } catch (e) {\n            console.error('解析用户状态失败', e);\n          }\n        } else {\n          // 如果没有保存的状态，尝试获取用户信息\n          this.fetchUserInfo();\n        }\n      }\n    },\n    // 登录方法\n    async login(credentials) {\n      try {\n        const res = await loginUser(credentials);\n\n        // 更新状态\n        this.token = res.token;\n        this.isLoggedIn = true;\n        this.username = res.user.user_name;\n        this.userEmail = res.user.email;\n        this.cartCount = res.user.cartCount || 0;\n\n        // 保存到本地存储\n        localStorage.setItem('token', this.token);\n        this.saveState();\n        return true;\n      } catch (error) {\n        console.error('登录失败:', error.message);\n        throw error;\n      }\n    },\n    // 登出方法\n    logout() {\n      this.$reset();\n      localStorage.removeItem('token');\n      localStorage.removeItem('userState');\n    },\n    // 获取用户信息\n    async fetchUserInfo() {\n      if (!this.token) return;\n      try {\n        const res = await getCurrentUser();\n        this.username = res.user.user_name;\n        this.userEmail = res.user.email;\n        this.cartCount = res.user.cartCount || 0;\n        this.saveState();\n      } catch (error) {\n        console.error('获取用户信息失败:', error.message);\n        this.logout();\n      }\n    },\n    // 更新购物车数量\n    updateCartCount(count) {\n      this.cartCount = count;\n      this.saveState();\n    },\n    // 保存状态到本地存储\n    saveState() {\n      const state = {\n        isLoggedIn: this.isLoggedIn,\n        username: this.username,\n        userEmail: this.userEmail,\n        cartCount: this.cartCount\n      };\n      localStorage.setItem('userState', JSON.stringify(state));\n    }\n  }\n});","map":{"version":3,"names":["defineStore","loginUser","getCurrentUser","state","isLoggedIn","username","userEmail","cartCount","token","actions","init","localStorage","getItem","savedState","JSON","parse","e","console","error","fetchUserInfo","login","credentials","res","user","user_name","email","setItem","saveState","message","logout","$reset","removeItem","updateCartCount","count","stringify"],"sources":["D:/计算机/谭/shopping_website/src/composables/useUserStore.js"],"sourcesContent":["// src/store/userStore.js (修复后)\r\nimport { defineStore } from 'pinia';\r\nimport { loginUser, getCurrentUser } from '@/api/user';\r\n\r\nexport default defineStore('user', {\r\n    state: () => ({\r\n        isLoggedIn: false,\r\n        username: '',\r\n        userEmail: '',\r\n        cartCount: 0,\r\n        token: null\r\n    }),\r\n    actions: {\r\n        // 初始化用户状态\r\n        init() {\r\n            const token = localStorage.getItem('token');\r\n            const savedState = localStorage.getItem('userState');\r\n\r\n            if (token) {\r\n                this.token = token;\r\n                this.isLoggedIn = true;\r\n\r\n                if (savedState) {\r\n                    try {\r\n                        const state = JSON.parse(savedState);\r\n                        this.username = state.username || '';\r\n                        this.userEmail = state.userEmail || '';\r\n                        this.cartCount = state.cartCount || 0;\r\n                    } catch (e) {\r\n                        console.error('解析用户状态失败', e);\r\n                    }\r\n                } else {\r\n                    // 如果没有保存的状态，尝试获取用户信息\r\n                    this.fetchUserInfo();\r\n                }\r\n            }\r\n        },\r\n\r\n        // 登录方法\r\n        async login(credentials) {\r\n            try {\r\n                const res = await loginUser(credentials);\r\n\r\n                // 更新状态\r\n                this.token = res.token;\r\n                this.isLoggedIn = true;\r\n                this.username = res.user.user_name;\r\n                this.userEmail = res.user.email;\r\n                this.cartCount = res.user.cartCount || 0;\r\n\r\n                // 保存到本地存储\r\n                localStorage.setItem('token', this.token);\r\n                this.saveState();\r\n\r\n                return true;\r\n            } catch (error) {\r\n                console.error('登录失败:', error.message);\r\n                throw error;\r\n            }\r\n        },\r\n\r\n        // 登出方法\r\n        logout() {\r\n            this.$reset();\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('userState');\r\n        },\r\n\r\n        // 获取用户信息\r\n        async fetchUserInfo() {\r\n            if (!this.token) return;\r\n\r\n            try {\r\n                const res = await getCurrentUser();\r\n\r\n                this.username = res.user.user_name;\r\n                this.userEmail = res.user.email;\r\n                this.cartCount = res.user.cartCount || 0;\r\n\r\n                this.saveState();\r\n            } catch (error) {\r\n                console.error('获取用户信息失败:', error.message);\r\n                this.logout();\r\n            }\r\n        },\r\n\r\n        // 更新购物车数量\r\n        updateCartCount(count) {\r\n            this.cartCount = count;\r\n            this.saveState();\r\n        },\r\n\r\n        // 保存状态到本地存储\r\n        saveState() {\r\n            const state = {\r\n                isLoggedIn: this.isLoggedIn,\r\n                username: this.username,\r\n                userEmail: this.userEmail,\r\n                cartCount: this.cartCount\r\n            };\r\n            localStorage.setItem('userState', JSON.stringify(state));\r\n        }\r\n    }\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
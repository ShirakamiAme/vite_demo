{"ast":null,"code":"// src/api/user.js\nimport axios from './axios.js';\n\n// 用户注册\nexport async function registerUser(userData) {\n  try {\n    const res = await axios.post('/register', userData, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!res.data || !res.data.user) {\n      throw new Error('无效的响应格式');\n    }\n    return res.data;\n  } catch (error) {\n    let errorMessage = '注册失败';\n    if (error.response) {\n      if (error.response.data && error.response.data.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.response.status === 400) {\n        errorMessage = '请求数据格式错误';\n      } else if (error.response.status === 409) {\n        errorMessage = '用户名或邮箱已存在';\n      }\n    } else if (error.request) {\n      errorMessage = '无法连接到服务器，请检查网络';\n    } else {\n      errorMessage = error.message;\n    }\n    const registerError = new Error(errorMessage);\n    registerError.originalError = error;\n    throw registerError;\n  }\n}\n\n// 用户登录\nexport async function loginUser(credentials) {\n  try {\n    const res = await axios.post('/login', credentials, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!res.data || !res.data.token) {\n      throw new Error('无效的响应格式');\n    }\n    return res.data;\n  } catch (error) {\n    let errorMessage = '登录失败';\n    if (error.response) {\n      if (error.response.data && error.response.data.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.response.status === 401) {\n        errorMessage = '用户名或密码错误';\n      } else if (error.response.status === 400) {\n        errorMessage = '请求数据格式错误';\n      }\n    } else if (error.request) {\n      errorMessage = '无法连接到服务器，请检查网络';\n    } else {\n      errorMessage = error.message;\n    }\n    const loginError = new Error(errorMessage);\n    loginError.originalError = error;\n    throw loginError;\n  }\n}\nexport async function getCurrentUser() {\n  try {\n    const res = await axios.get('/me');\n    if (!res.data || !res.data.user) {\n      throw new Error('无效的响应格式');\n    }\n    return res.data;\n  } catch (error) {\n    let errorMessage = '获取用户信息失败';\n    if (error.response) {\n      if (error.response.status === 401) {\n        errorMessage = '未授权，请重新登录';\n      } else if (error.response.data && error.response.data.message) {\n        errorMessage = error.response.data.message;\n      }\n    } else if (error.request) {\n      errorMessage = '无法连接到服务器，请检查网络';\n    } else {\n      errorMessage = error.message;\n    }\n    const userError = new Error(errorMessage);\n    userError.originalError = error;\n    throw userError;\n  }\n}","map":{"version":3,"names":["axios","registerUser","userData","res","post","headers","data","user","Error","error","errorMessage","response","message","status","request","registerError","originalError","loginUser","credentials","token","loginError","getCurrentUser","get","userError"],"sources":["D:/计算机/谭/shopping_website/src/api/user.js"],"sourcesContent":["// src/api/user.js\r\nimport axios from './axios.js';\r\n\r\n// 用户注册\r\nexport async function registerUser(userData) {\r\n    try {\r\n        const res = await axios.post('/register', userData, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        if (!res.data || !res.data.user) {\r\n            throw new Error('无效的响应格式');\r\n        }\r\n\r\n        return res.data;\r\n    } catch (error) {\r\n        let errorMessage = '注册失败';\r\n\r\n        if (error.response) {\r\n            if (error.response.data && error.response.data.message) {\r\n                errorMessage = error.response.data.message;\r\n            } else if (error.response.status === 400) {\r\n                errorMessage = '请求数据格式错误';\r\n            } else if (error.response.status === 409) {\r\n                errorMessage = '用户名或邮箱已存在';\r\n            }\r\n        } else if (error.request) {\r\n            errorMessage = '无法连接到服务器，请检查网络';\r\n        } else {\r\n            errorMessage = error.message;\r\n        }\r\n\r\n        const registerError = new Error(errorMessage);\r\n        registerError.originalError = error;\r\n        throw registerError;\r\n    }\r\n}\r\n\r\n// 用户登录\r\nexport async function loginUser(credentials) {\r\n    try {\r\n        const res = await axios.post('/login', credentials, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        if (!res.data || !res.data.token) {\r\n            throw new Error('无效的响应格式');\r\n        }\r\n\r\n        return res.data;\r\n    } catch (error) {\r\n        let errorMessage = '登录失败';\r\n\r\n        if (error.response) {\r\n            if (error.response.data && error.response.data.message) {\r\n                errorMessage = error.response.data.message;\r\n            } else if (error.response.status === 401) {\r\n                errorMessage = '用户名或密码错误';\r\n            } else if (error.response.status === 400) {\r\n                errorMessage = '请求数据格式错误';\r\n            }\r\n        } else if (error.request) {\r\n            errorMessage = '无法连接到服务器，请检查网络';\r\n        } else {\r\n            errorMessage = error.message;\r\n        }\r\n\r\n        const loginError = new Error(errorMessage);\r\n        loginError.originalError = error;\r\n        throw loginError;\r\n    }\r\n}\r\n\r\nexport async function getCurrentUser() {\r\n    try {\r\n        const res = await axios.get('/me');\r\n\r\n        if (!res.data || !res.data.user) {\r\n            throw new Error('无效的响应格式');\r\n        }\r\n\r\n        return res.data;\r\n    } catch (error) {\r\n        let errorMessage = '获取用户信息失败';\r\n\r\n        if (error.response) {\r\n            if (error.response.status === 401) {\r\n                errorMessage = '未授权，请重新登录';\r\n            } else if (error.response.data && error.response.data.message) {\r\n                errorMessage = error.response.data.message;\r\n            }\r\n        } else if (error.request) {\r\n            errorMessage = '无法连接到服务器，请检查网络';\r\n        } else {\r\n            errorMessage = error.message;\r\n        }\r\n\r\n        const userError = new Error(errorMessage);\r\n        userError.originalError = error;\r\n        throw userError;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { ref } from 'vue';\nimport { getAllProducts } from '@/api/product.js';\nexport function useProductFetch() {\n  const products = ref([]);\n  const loading = ref(false);\n  const error = ref(null);\n  const hasMore = ref(true);\n\n  // 分页参数\n  const page = ref(1);\n  const limit = ref(20);\n  const fetchProducts = async (category = null) => {\n    if (loading.value || !hasMore.value) return;\n    let apiResponse;\n    const params = {\n      page: page.value,\n      limit: limit.value\n    };\n    if (category) {\n      params.category = category;\n    }\n    try {\n      loading.value = true;\n      error.value = null;\n\n      // 调用 API\n      apiResponse = await getAllProducts(params);\n      console.log('API 响应:', apiResponse);\n\n      // 提取商品数据 - 简化逻辑\n      let productsData = [];\n\n      // 尝试多种可能的响应结构\n      if (Array.isArray(apiResponse)) {\n        productsData = apiResponse;\n      } else if (apiResponse?.data && Array.isArray(apiResponse.data)) {\n        productsData = apiResponse.data;\n      } else if (apiResponse?.data?.data && Array.isArray(apiResponse.data.data)) {\n        productsData = apiResponse.data.data;\n      } else {\n        // 如果无法识别结构，尝试直接使用响应\n        console.warn('无法识别的API结构，尝试直接使用响应:', apiResponse);\n        productsData = apiResponse || [];\n      }\n\n      // 检查是否还有更多商品\n      // 核心逻辑：如果返回的商品数量少于请求的每页数量，说明没有更多了\n      if (productsData.length < limit.value) {\n        hasMore.value = false;\n      }\n\n      // 如果返回0个商品且不是第一页，说明没有更多了\n      if (productsData.length === 0 && page.value > 1) {\n        hasMore.value = false;\n      }\n\n      // 追加新商品\n      products.value = [...products.value, ...productsData];\n      page.value++;\n      console.log(`加载了 ${productsData.length} 个商品`);\n      console.log(`总计商品数: ${products.value.length}`);\n      console.log(`还有更多商品: ${hasMore.value}`);\n    } catch (err) {\n      error.value = err.message || '获取商品失败';\n      console.error('API 错误详情:', err);\n\n      // 特殊处理：如果错误是\"无效的API响应格式\"，尝试直接使用响应\n      if (err.message.includes('无效的API响应格式') && apiResponse) {\n        console.warn('尝试直接使用API响应作为商品数据');\n        products.value = [...products.value, ...(Array.isArray(apiResponse) ? apiResponse : [apiResponse])];\n        hasMore.value = false; // 设为没有更多，避免继续加载\n      }\n    } finally {\n      loading.value = false;\n    }\n  };\n  const reset = () => {\n    products.value = [];\n    page.value = 1;\n    hasMore.value = true;\n    error.value = null;\n  };\n  return {\n    products,\n    loading,\n    error,\n    hasMore,\n    fetchProducts,\n    reset\n  };\n}","map":{"version":3,"names":["ref","getAllProducts","useProductFetch","products","loading","error","hasMore","page","limit","fetchProducts","category","value","apiResponse","params","console","log","productsData","Array","isArray","data","warn","length","err","message","includes","reset"],"sources":["D:/计算机/谭/shopping_website/src/composables/useProductFetch.js"],"sourcesContent":["import { ref } from 'vue'\r\nimport { getAllProducts } from '@/api/product.js'\r\n\r\nexport function useProductFetch() {\r\n    const products = ref([])\r\n    const loading = ref(false)\r\n    const error = ref(null)\r\n    const hasMore = ref(true)\r\n\r\n    // 分页参数\r\n    const page = ref(1)\r\n    const limit = ref(20)\r\n\r\n    const fetchProducts = async (category = null) => {\r\n        if (loading.value || !hasMore.value) return\r\n\r\n        let apiResponse\r\n        const params = {\r\n            page: page.value,\r\n            limit: limit.value\r\n        }\r\n\r\n        if (category) {\r\n            params.category = category\r\n        }\r\n\r\n        try {\r\n            loading.value = true\r\n            error.value = null\r\n\r\n            // 调用 API\r\n            apiResponse = await getAllProducts(params)\r\n            console.log('API 响应:', apiResponse)\r\n\r\n            // 提取商品数据 - 简化逻辑\r\n            let productsData = [];\r\n\r\n            // 尝试多种可能的响应结构\r\n            if (Array.isArray(apiResponse)) {\r\n                productsData = apiResponse;\r\n            } else if (apiResponse?.data && Array.isArray(apiResponse.data)) {\r\n                productsData = apiResponse.data;\r\n            } else if (apiResponse?.data?.data && Array.isArray(apiResponse.data.data)) {\r\n                productsData = apiResponse.data.data;\r\n            } else {\r\n                // 如果无法识别结构，尝试直接使用响应\r\n                console.warn('无法识别的API结构，尝试直接使用响应:', apiResponse);\r\n                productsData = apiResponse || [];\r\n            }\r\n\r\n            // 检查是否还有更多商品\r\n            // 核心逻辑：如果返回的商品数量少于请求的每页数量，说明没有更多了\r\n            if (productsData.length < limit.value) {\r\n                hasMore.value = false;\r\n            }\r\n\r\n            // 如果返回0个商品且不是第一页，说明没有更多了\r\n            if (productsData.length === 0 && page.value > 1) {\r\n                hasMore.value = false;\r\n            }\r\n\r\n            // 追加新商品\r\n            products.value = [...products.value, ...productsData];\r\n            page.value++;\r\n\r\n            console.log(`加载了 ${productsData.length} 个商品`);\r\n            console.log(`总计商品数: ${products.value.length}`);\r\n            console.log(`还有更多商品: ${hasMore.value}`);\r\n\r\n        } catch (err) {\r\n            error.value = err.message || '获取商品失败';\r\n            console.error('API 错误详情:', err);\r\n\r\n            // 特殊处理：如果错误是\"无效的API响应格式\"，尝试直接使用响应\r\n            if (err.message.includes('无效的API响应格式') && apiResponse) {\r\n                console.warn('尝试直接使用API响应作为商品数据');\r\n                products.value = [...products.value, ...(Array.isArray(apiResponse) ? apiResponse : [apiResponse])];\r\n                hasMore.value = false; // 设为没有更多，避免继续加载\r\n            }\r\n        } finally {\r\n            loading.value = false;\r\n        }\r\n    }\r\n\r\n    const reset = () => {\r\n        products.value = [];\r\n        page.value = 1;\r\n        hasMore.value = true;\r\n        error.value = null;\r\n    }\r\n\r\n    return {\r\n        products,\r\n        loading,\r\n        error,\r\n        hasMore,\r\n        fetchProducts,\r\n        reset\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
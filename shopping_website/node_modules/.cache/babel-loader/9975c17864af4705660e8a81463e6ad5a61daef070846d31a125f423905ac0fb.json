{"ast":null,"code":"import { ref } from 'vue';\nimport { getAllProducts } from '@/api/product.js';\nexport function useProductFetch() {\n  const products = ref([]);\n  const loading = ref(false);\n  const error = ref(null);\n  const fetchProducts = async () => {\n    let apiResponse; // 声明在外部以便在 catch 中使用\n\n    try {\n      loading.value = true;\n      error.value = null;\n\n      // 获取 API 响应\n      apiResponse = await getAllProducts();\n      console.log('完整API响应:', apiResponse); // 调试用\n\n      // 检查响应结构并提取数据\n      let productsData;\n\n      // 情况1: 响应本身是数组\n      if (Array.isArray(apiResponse)) {\n        productsData = apiResponse;\n      }\n      // 情况2: 响应有 data 属性且是数组\n      else if (apiResponse && Array.isArray(apiResponse.data)) {\n        productsData = apiResponse.data;\n      }\n      // 情况3: 响应有 data.data 结构\n      else if (apiResponse && apiResponse.data && Array.isArray(apiResponse.data.data)) {\n        productsData = apiResponse.data.data;\n      }\n      // 无法识别的格式\n      else {\n        throw new Error(`无效的API响应格式: ${typeof apiResponse}`);\n      }\n      products.value = productsData;\n      console.log(`成功加载 ${products.value.length} 个商品`);\n    } catch (err) {\n      error.value = err.message || '获取商品失败';\n      console.error('API错误详情:', err);\n\n      // 打印响应内容（如果可用）\n      if (apiResponse) {\n        console.warn('API响应内容:', apiResponse);\n      }\n    } finally {\n      loading.value = false;\n    }\n  };\n  return {\n    products,\n    loading,\n    error,\n    fetchProducts\n  };\n}","map":{"version":3,"names":["ref","getAllProducts","useProductFetch","products","loading","error","fetchProducts","apiResponse","value","console","log","productsData","Array","isArray","data","Error","length","err","message","warn"],"sources":["D:/计算机/谭/shopping_website/src/composables/useProductFetch.js"],"sourcesContent":["import { ref } from 'vue'\r\nimport { getAllProducts } from '@/api/product.js'\r\n\r\nexport function useProductFetch() {\r\n    const products = ref([])\r\n    const loading = ref(false)\r\n    const error = ref(null)\r\n\r\n    const fetchProducts = async () => {\r\n        let apiResponse; // 声明在外部以便在 catch 中使用\r\n\r\n        try {\r\n            loading.value = true\r\n            error.value = null\r\n\r\n            // 获取 API 响应\r\n            apiResponse = await getAllProducts()\r\n            console.log('完整API响应:', apiResponse) // 调试用\r\n\r\n            // 检查响应结构并提取数据\r\n            let productsData;\r\n\r\n            // 情况1: 响应本身是数组\r\n            if (Array.isArray(apiResponse)) {\r\n                productsData = apiResponse;\r\n            }\r\n            // 情况2: 响应有 data 属性且是数组\r\n            else if (apiResponse && Array.isArray(apiResponse.data)) {\r\n                productsData = apiResponse.data;\r\n            }\r\n            // 情况3: 响应有 data.data 结构\r\n            else if (apiResponse && apiResponse.data && Array.isArray(apiResponse.data.data)) {\r\n                productsData = apiResponse.data.data;\r\n            }\r\n            // 无法识别的格式\r\n            else {\r\n                throw new Error(`无效的API响应格式: ${typeof apiResponse}`);\r\n            }\r\n\r\n            products.value = productsData;\r\n            console.log(`成功加载 ${products.value.length} 个商品`);\r\n        } catch (err) {\r\n            error.value = err.message || '获取商品失败';\r\n            console.error('API错误详情:', err);\r\n\r\n            // 打印响应内容（如果可用）\r\n            if (apiResponse) {\r\n                console.warn('API响应内容:', apiResponse);\r\n            }\r\n        } finally {\r\n            loading.value = false;\r\n        }\r\n    }\r\n\r\n    return {\r\n        products,\r\n        loading,\r\n        error,\r\n        fetchProducts\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,KAAK;AACzB,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,SAASC,eAAeA,CAAA,EAAG;EAC9B,MAAMC,QAAQ,GAAGH,GAAG,CAAC,EAAE,CAAC;EACxB,MAAMI,OAAO,GAAGJ,GAAG,CAAC,KAAK,CAAC;EAC1B,MAAMK,KAAK,GAAGL,GAAG,CAAC,IAAI,CAAC;EAEvB,MAAMM,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAIC,WAAW,CAAC,CAAC;;IAEjB,IAAI;MACAH,OAAO,CAACI,KAAK,GAAG,IAAI;MACpBH,KAAK,CAACG,KAAK,GAAG,IAAI;;MAElB;MACAD,WAAW,GAAG,MAAMN,cAAc,CAAC,CAAC;MACpCQ,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,WAAW,CAAC,EAAC;;MAErC;MACA,IAAII,YAAY;;MAEhB;MACA,IAAIC,KAAK,CAACC,OAAO,CAACN,WAAW,CAAC,EAAE;QAC5BI,YAAY,GAAGJ,WAAW;MAC9B;MACA;MAAA,KACK,IAAIA,WAAW,IAAIK,KAAK,CAACC,OAAO,CAACN,WAAW,CAACO,IAAI,CAAC,EAAE;QACrDH,YAAY,GAAGJ,WAAW,CAACO,IAAI;MACnC;MACA;MAAA,KACK,IAAIP,WAAW,IAAIA,WAAW,CAACO,IAAI,IAAIF,KAAK,CAACC,OAAO,CAACN,WAAW,CAACO,IAAI,CAACA,IAAI,CAAC,EAAE;QAC9EH,YAAY,GAAGJ,WAAW,CAACO,IAAI,CAACA,IAAI;MACxC;MACA;MAAA,KACK;QACD,MAAM,IAAIC,KAAK,CAAC,eAAe,OAAOR,WAAW,EAAE,CAAC;MACxD;MAEAJ,QAAQ,CAACK,KAAK,GAAGG,YAAY;MAC7BF,OAAO,CAACC,GAAG,CAAC,QAAQP,QAAQ,CAACK,KAAK,CAACQ,MAAM,MAAM,CAAC;IACpD,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVZ,KAAK,CAACG,KAAK,GAAGS,GAAG,CAACC,OAAO,IAAI,QAAQ;MACrCT,OAAO,CAACJ,KAAK,CAAC,UAAU,EAAEY,GAAG,CAAC;;MAE9B;MACA,IAAIV,WAAW,EAAE;QACbE,OAAO,CAACU,IAAI,CAAC,UAAU,EAAEZ,WAAW,CAAC;MACzC;IACJ,CAAC,SAAS;MACNH,OAAO,CAACI,KAAK,GAAG,KAAK;IACzB;EACJ,CAAC;EAED,OAAO;IACHL,QAAQ;IACRC,OAAO;IACPC,KAAK;IACLC;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}